{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"accept\", \"browseOrReplaceText\", \"capture\", \"className\", \"disabled\", \"height\", \"inputText\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"placeholder\", \"required\"];\nimport React, { memo, forwardRef, useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Button } from '../../buttons';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { TextInput } from '../../text-input';\nexport var CLASS_PREFIX = 'evergreen-file-picker';\nvar ROOT_CLASS_NAME = \"\".concat(CLASS_PREFIX, \"-root\");\nvar getBrowseOrReplaceText = function getBrowseOrReplaceText(fileCount) {\n  var action = fileCount === 0 ? 'Select' : 'Replace';\n  var fileLabel = fileCount > 1 ? 'files' : 'file';\n  return \"\".concat(action, \" \").concat(fileLabel);\n};\nvar getInputValue = function getInputValue(files) {\n  if (files.length === 1) {\n    return files[0].name;\n  }\n  if (files.length > 1) {\n    return \"\".concat(files.length, \" files\");\n  }\n  return '';\n};\nvar FilePicker = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(function FilePicker(props, ref) {\n  var accept = props.accept,\n    _props$browseOrReplac = props.browseOrReplaceText,\n    browseOrReplaceText = _props$browseOrReplac === void 0 ? getBrowseOrReplaceText : _props$browseOrReplac,\n    capture = props.capture,\n    className = props.className,\n    disabled = props.disabled,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 32 : _props$height,\n    _props$inputText = props.inputText,\n    inputText = _props$inputText === void 0 ? getInputValue : _props$inputText,\n    multiple = props.multiple,\n    name = props.name,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? 'Select a file to uploadâ€¦' : _props$placeholder,\n    required = props.required,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    files = _useState2[0],\n    setFiles = _useState2[1];\n  var fileInputRef = useRef();\n  var handleFileChange = useCallback(function (e) {\n    // Firefox returns the same array instance each time for some reason\n    var filesCopy = _toConsumableArray(e.target.files);\n    setFiles(filesCopy);\n    safeInvoke(onChange, filesCopy);\n  }, [onChange]);\n  var handleButtonClick = useCallback(function () {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    // Setting e.target.files to an array fails. It must be a FileList\n    if (e && e.target) {\n      e.target.files = fileInputRef.current && fileInputRef.current.files;\n    }\n    safeInvoke(onBlur, e);\n  }, [onBlur]);\n  var rootClassNames = className ? \"\".concat(ROOT_CLASS_NAME, \" \").concat(className) : ROOT_CLASS_NAME;\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    display: \"flex\",\n    className: rootClassNames,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(Box, {\n    ref: fileInputRef,\n    className: \"\".concat(CLASS_PREFIX, \"-file-input\"),\n    is: \"input\",\n    type: \"file\",\n    name: name,\n    accept: accept,\n    required: required,\n    multiple: multiple,\n    disabled: disabled,\n    capture: capture,\n    onChange: handleFileChange,\n    display: \"none\"\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    className: \"\".concat(CLASS_PREFIX, \"-text-input\"),\n    readOnly: true,\n    value: inputText(files),\n    placeholder: placeholder // There's a weird specifity issue when there's two differently sized inputs on the page\n    ,\n\n    borderTopRightRadius: \"0 !important\",\n    borderBottomRightRadius: \"0 !important\",\n    height: height,\n    flex: 1,\n    textOverflow: \"ellipsis\",\n    onBlur: handleBlur\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(CLASS_PREFIX, \"-button\"),\n    onClick: handleButtonClick,\n    disabled: disabled,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    marginLeft: -1,\n    height: height,\n    flexShrink: 0,\n    type: \"button\",\n    onBlur: handleBlur\n  }, browseOrReplaceText(files.length)));\n}));\nFilePicker.propTypes = {\n  /**\n   * Name attribute of the input.\n   */\n  name: PropTypes.string,\n  /**\n   * The accept attribute of the input.\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /**\n   * When true, the file picker is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * When true, accept multiple files.\n   */\n  multiple: PropTypes.bool,\n  /**\n   * When true, the filepicker is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The capture attribute of the input.\n   */\n  capture: PropTypes.bool,\n  /**\n   * The height of the file picker.\n   */\n  height: PropTypes.number,\n  /**\n   * Function called when onChange is fired.\n   * (files: FileList) => void\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function called when onBlur is fired.\n   * (event: React.FocusEvent) => void\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Placeholder of the text input\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Class name passed to the FilePicker.\n   * Only use this if you know what you are doing.\n   */\n  className: PropTypes.string,\n  /**\n   * Function that returns the call-to-action button text for selecting files.\n   * @type {(fileCount: number) => string}\n   */\n  browseOrReplaceText: PropTypes.func,\n  /**\n   * Function that returns the text in the input field.\n   * @type {(files: File[]) => string}\n   */\n  inputText: PropTypes.func\n};\nexport default FilePicker;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
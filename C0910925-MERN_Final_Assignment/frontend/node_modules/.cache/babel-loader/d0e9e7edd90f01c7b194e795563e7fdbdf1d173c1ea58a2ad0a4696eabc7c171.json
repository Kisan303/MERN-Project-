{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst is_production_1 = __importDefault(require(\"./is-production\"));\nconst isBrowser = typeof window !== 'undefined';\nfunction last(arr) {\n  return arr[arr.length - 1];\n}\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    return tag.sheet;\n  }\n  for (let i = 0; i < document.styleSheets.length; i += 1) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      return document.styleSheets[i];\n    }\n  }\n  return;\n}\nfunction makeStyleTag() {\n  const tag = document.createElement('style');\n  tag.type = 'text/css';\n  tag.setAttribute('data-ui-box', '');\n  tag.append(document.createTextNode(''));\n  (document.head || document.querySelector('head')).append(tag);\n  return tag;\n}\nclass CustomStyleSheet {\n  constructor(options = {}) {\n    this.tags = [];\n    this.ctr = 0;\n    this.injected = false;\n    this.isSpeedy = options.speedy === undefined ? (0, is_production_1.default)() : options.speedy;\n    this.maxLength = options.maxLength || 65000;\n  }\n  getSheet() {\n    return sheetForTag(last(this.tags));\n  }\n  inject() {\n    if (this.injected) {\n      throw new Error('StyleSheet has already been injected.');\n    }\n    if (isBrowser) {\n      this.tags[0] = makeStyleTag();\n    } else {\n      this.sheet = {\n        cssRules: [],\n        insertRule: rule => {\n          ;\n          this.sheet.cssRules.push({\n            cssText: rule\n          });\n        }\n      };\n    }\n    this.injected = true;\n  }\n  speedy(bool) {\n    if (this.ctr !== 0) {\n      throw new Error(`StyleSheet cannot change speedy mode after inserting any rule to sheet. Either call speedy(${bool}) earlier in your app, or call flush() before speedy(${bool})`);\n    }\n    this.isSpeedy = Boolean(bool);\n  }\n  _insert(sheet, rule) {\n    sheet.insertRule(rule, sheet.cssRules.length);\n  }\n  insert(rule) {\n    if (isBrowser) {\n      const sheet = this.getSheet();\n      if (this.isSpeedy && sheet != null) {\n        this._insert(sheet, rule);\n      } else {\n        last(this.tags).append(document.createTextNode(rule));\n      }\n    } else if (this.sheet) {\n      this.sheet.insertRule(rule, this.sheet.cssRules.length);\n    }\n    this.ctr += 1;\n    if (isBrowser && this.ctr % this.maxLength === 0) {\n      this.tags.push(makeStyleTag());\n    }\n    return this.ctr - 1;\n  }\n  flush() {\n    if (isBrowser) {\n      this.tags.forEach(tag => tag.parentNode.removeChild(tag));\n      this.tags = [];\n      this.sheet = null;\n      this.ctr = 0;\n    } else if (this.sheet) {\n      this.sheet.cssRules = [];\n    }\n    this.injected = false;\n  }\n  rules() {\n    if (!isBrowser) {\n      return this.sheet ? this.sheet.cssRules : [];\n    }\n    const arr = [];\n    this.tags.forEach(tag => {\n      const sheet = sheetForTag(tag);\n      if (sheet) {\n        const rules = Array.from(sheet.cssRules);\n        arr.splice(arr.length, 0, ...[...rules]);\n      }\n    });\n    return arr;\n  }\n}\nexports.default = CustomStyleSheet;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
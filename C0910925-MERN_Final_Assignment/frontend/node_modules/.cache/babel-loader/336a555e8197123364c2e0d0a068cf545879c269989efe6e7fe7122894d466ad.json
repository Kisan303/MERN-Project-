{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"hasIcon\", \"intent\", \"size\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { getIconForIntent } from './getIconForIntent';\nvar pseudoSelectors = {};\nvar internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n};\nvar InlineAlert = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(function InlineAlert(props, ref) {\n  var children = props.children,\n    className = props.className,\n    _props$hasIcon = props.hasIcon,\n    hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,\n    _props$intent = props.intent,\n    intent = _props$intent === void 0 ? 'info' : _props$intent,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 400 : _props$size,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var intentToken = intent === 'none' ? 'info' : intent;\n  var themedProps = useStyleConfig('InlineAlert', {\n    intent: intentToken\n  }, pseudoSelectors, internalStyles);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: ref,\n    className: className\n  }, themedProps, restProps), hasIcon && /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    marginRight: 16\n  }, getIconForIntent(intent, {\n    size: 16\n  })), /*#__PURE__*/React.createElement(Text, {\n    size: size,\n    lineHeight: 1,\n    fontWeight: 500,\n    color: \"inherit\"\n  }, children));\n}));\nInlineAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.string,\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number\n});\nexport default InlineAlert;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
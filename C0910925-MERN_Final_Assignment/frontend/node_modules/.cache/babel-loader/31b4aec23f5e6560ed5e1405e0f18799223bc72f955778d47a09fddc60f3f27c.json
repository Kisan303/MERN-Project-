{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport canUseDom from '../../lib/canUseDom';\nimport getMajorVersion from '../../lib/getMajorVersion';\nimport ToastManager from './ToastManager';\n/**\n * The Toaster manages the interactions between\n * the ToasterManger and the toast API.\n */\n\nvar Toaster = function Toaster() {\n  var _this = this;\n  _classCallCheck(this, Toaster);\n  _defineProperty(this, \"_bindNotify\", function (handler) {\n    _this.notifyHandler = handler;\n  });\n  _defineProperty(this, \"_bindRemove\", function (handler) {\n    _this.removeHandler = handler;\n  });\n  _defineProperty(this, \"_bindGetToasts\", function (handler) {\n    _this.getToastsHandler = handler;\n  });\n  _defineProperty(this, \"_bindCloseAll\", function (handler) {\n    _this.closeAllHandler = handler;\n  });\n  _defineProperty(this, \"getToasts\", function () {\n    return _this.getToastsHandler();\n  });\n  _defineProperty(this, \"closeAll\", function () {\n    return _this.closeAllHandler();\n  });\n  _defineProperty(this, \"notify\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread(_objectSpread({}, settings), {}, {\n      intent: 'none'\n    }));\n  });\n  _defineProperty(this, \"success\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread(_objectSpread({}, settings), {}, {\n      intent: 'success'\n    }));\n  });\n  _defineProperty(this, \"warning\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread(_objectSpread({}, settings), {}, {\n      intent: 'warning'\n    }));\n  });\n  _defineProperty(this, \"danger\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread(_objectSpread({}, settings), {}, {\n      intent: 'danger'\n    }));\n  });\n  _defineProperty(this, \"remove\", function (id) {\n    return _this.removeHandler(id);\n  });\n  if (!canUseDom) return;\n  var container = document.createElement('div');\n  container.setAttribute('data-evergreen-toaster-container', '');\n  document.body.appendChild(container);\n  var toastManager = function toastManager() {\n    return /*#__PURE__*/React.createElement(ToastManager, {\n      bindNotify: _this._bindNotify,\n      bindRemove: _this._bindRemove,\n      bindGetToasts: _this._bindGetToasts,\n      bindCloseAll: _this._bindCloseAll\n    });\n  };\n  if (getMajorVersion(ReactDOM.version) >= 18) {\n    try {\n      var _require = require('react-dom/client'),\n        createRoot = _require.createRoot;\n      var root = createRoot(container);\n      root.render(toastManager());\n    } catch (e) {\n      ReactDOM.render(toastManager(), container);\n    }\n    return;\n  }\n  ReactDOM.render(toastManager(), container);\n};\nexport { Toaster as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
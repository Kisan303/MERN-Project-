{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst enhancers_1 = require(\"./enhancers\");\nconst expand_aliases_1 = __importDefault(require(\"./expand-aliases\"));\nconst cache = __importStar(require(\"./cache\"));\nconst styles = __importStar(require(\"./styles\"));\nconst SELECTORS_PROP = 'selectors';\nfunction enhanceProps(props, selectorHead = '', parentProperty = '') {\n  const propsMap = (0, expand_aliases_1.default)(props);\n  const preservedProps = {};\n  let className = props.className || '';\n  for (const [property, value] of propsMap) {\n    const isSelectorOrChildProp = property === SELECTORS_PROP || parentProperty.length > 0;\n    if (isObject(value) && isSelectorOrChildProp) {\n      const prop = property === SELECTORS_PROP ? '' : property;\n      const newSelectorHead = selectorHead.includes(',') ? selectorHead.split(',').map(selector => `${selector}${prop}`).join(',') : `${selectorHead}${prop}`;\n      const parsed = enhanceProps(value, noAnd(newSelectorHead), property);\n      className = `${className} ${parsed.className}`;\n      continue;\n    }\n    const enhancer = enhancers_1.propEnhancers[property];\n    if (!enhancer) {\n      preservedProps[property] = value;\n      continue;\n    }\n    if (value === null || value === undefined || value === false) {\n      continue;\n    }\n    const cachedClassName = cache.get(property, value, selectorHead);\n    if (cachedClassName) {\n      className = `${className} ${cachedClassName}`;\n      continue;\n    }\n    const newCss = enhancer(value, selectorHead);\n    if (newCss) {\n      styles.add(newCss.styles);\n      cache.set(property, value, newCss.className, selectorHead);\n      className = `${className} ${newCss.className}`;\n    }\n  }\n  className = className.trim();\n  return {\n    className,\n    enhancedProps: preservedProps\n  };\n}\nexports.default = enhanceProps;\nconst isObject = value => value != null && typeof value === 'object';\nconst noAnd = value => value.replace(/&/g, '');","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
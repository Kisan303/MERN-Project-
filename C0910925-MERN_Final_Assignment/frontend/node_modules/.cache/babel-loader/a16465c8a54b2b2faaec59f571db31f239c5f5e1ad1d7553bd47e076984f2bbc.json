{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst prefixer_1 = __importDefault(require(\"./prefixer\"));\nconst value_to_string_1 = __importDefault(require(\"./value-to-string\"));\nconst get_class_name_1 = __importDefault(require(\"./get-class-name\"));\nconst is_production_1 = __importDefault(require(\"./utils/is-production\"));\nfunction getCss(propertyInfo, value, selector = '') {\n  let rules;\n  const valueType = typeof value;\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      const name = propertyInfo.jsName;\n      const encodedValue = JSON.stringify(value);\n      console.error(`📦 ui-box: property “${name}” was passed invalid value “${encodedValue}”. Only numbers and strings are supported.`);\n    }\n    return null;\n  }\n  const valueString = (0, value_to_string_1.default)(value, propertyInfo.defaultUnit);\n  const className = (0, get_class_name_1.default)(propertyInfo, valueString, selector);\n  if (propertyInfo.isPrefixed) {\n    rules = (0, prefixer_1.default)(propertyInfo.jsName || '', valueString);\n  } else {\n    rules = [{\n      property: propertyInfo.cssName || '',\n      value: valueString\n    }];\n  }\n  let styles;\n  if ((0, is_production_1.default)()) {\n    const rulesString = rules.map(rule => `${rule.property}:${rule.value}`).join(';');\n    styles = `${expandSelectors(className, selector)}{${rulesString}}`;\n  } else {\n    const rulesString = rules.map(rule => `  ${rule.property}: ${rule.value};`).join('\\n');\n    styles = `\n${expandSelectors(className, selector)} {\n${rulesString}\n}`;\n  }\n  return {\n    className,\n    styles,\n    rules\n  };\n}\nexports.default = getCss;\nconst expandSelectors = (className, selector) => {\n  if (!selector.includes(',')) {\n    return `.${className}${selector}`;\n  }\n  return selector.split(',').map(selectorPart => `.${className}${selectorPart}`).join(', ');\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
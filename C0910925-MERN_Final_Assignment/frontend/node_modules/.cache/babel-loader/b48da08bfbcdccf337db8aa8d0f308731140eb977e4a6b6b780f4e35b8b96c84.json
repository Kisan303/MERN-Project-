{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"appearance\", \"onClick\", \"onKeyPress\", \"onKeyDown\", \"isSelectable\", \"tabIndex\", \"className\", \"rightView\", \"arrowKeysOverrides\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React, { memo, forwardRef, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLatest, useMergedRef, useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { toaster } from '../../toaster';\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction';\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return;\n  }\n  if (typeof override === 'function') {\n    override();\n    return;\n  }\n  if (typeof override === 'string') {\n    document.querySelector(override).focus();\n    return;\n  } // This needs to be the node, not a React ref.\n\n  override.focus();\n}\nvar pseudoSelectors = {\n  _focus: '&[data-isselectable=\"true\"]:focus,&[aria-expanded=\"true\"][aria-haspopup=\"true\"]'\n};\nvar internalStyles = {\n  boxSizing: 'border-box',\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  flexShrink: 0,\n  overflow: 'hidden'\n};\nvar TableCell = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(function TableCell(props, forwardedRef) {\n  var children = props.children,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    onClick = props.onClick,\n    onKeyPress = props.onKeyPress,\n    onKeyDown = props.onKeyDown,\n    isSelectable = props.isSelectable,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n    className = props.className,\n    rightView = props.rightView,\n    arrowKeysOverrides = props.arrowKeysOverrides,\n    rest = _objectWithoutProperties(props, _excluded);\n  var cellRef = useRef(null);\n  var handleRef = useMergedRef(cellRef, forwardedRef);\n  var onKeyDownRef = useLatest(onKeyDown);\n  var handleKeyDown = useCallback(function (e) {\n    var arrowKeysOverrides = props.arrowKeysOverrides || {};\n    if (isSelectable) {\n      var key = e.key;\n      if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n        e.preventDefault();\n        try {\n          // Support arrow key overrides.\n          var override = arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()];\n          if (override === false) return;\n          if (override) return executeArrowKeyOverride(override);\n          manageTableCellFocusInteraction(key, cellRef.current);\n        } catch (error) {\n          toaster.danger('Keyboard interaction not possible');\n          console.error('Keyboard interaction not possible', error);\n        }\n      } else if (key === 'Escape') {\n        if (cellRef.current instanceof Node) cellRef.current.blur();\n      }\n    }\n    safeInvoke(onKeyDownRef.current, e);\n  },\n  // onKeyDownRef.current is a ref\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isSelectable, props.arrowKeysOverrides]);\n  var themedProps = useStyleConfig('TableCell', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: handleRef,\n    className: className,\n    tabIndex: isSelectable ? tabIndex : undefined,\n    \"data-isselectable\": isSelectable,\n    onClick: onClick,\n    onKeyDown: handleKeyDown\n  }, themedProps, rest), children, rightView || null);\n}));\nTableCell.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableCell;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
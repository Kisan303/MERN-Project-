{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"delay\", \"size\"],\n  _excluded2 = [\"height\", \"width\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React, { useState, useEffect, forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { keyframes } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nvar loadingKeyframes = keyframes('loading', {\n  0: {\n    transform: 'rotate(0)'\n  },\n  100: {\n    transform: 'rotate(360deg)'\n  }\n});\nvar loadingCircleKeyframes = keyframes('loading-circle', {\n  0: {\n    strokeDashoffset: 600\n  },\n  100: {\n    strokeDashoffset: 0\n  }\n});\nvar innerStyle = function innerStyle(color) {\n  return {\n    animation: \"\".concat(loadingCircleKeyframes, \" 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite\"),\n    fill: 'transparent',\n    stroke: color,\n    strokeDasharray: 300,\n    strokeDashoffset: 600,\n    strokeLinecap: 'round',\n    strokeMiterlimit: 10,\n    strokeWidth: 12\n  };\n};\nvar emptyObject = {};\nvar Spinner = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(function Spinner(_ref, ref) {\n  var _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'medium' : _ref$size,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState(delay === 0),\n    _useState2 = _slicedToArray(_useState, 2),\n    isVisible = _useState2[0],\n    setIsVisible = _useState2[1];\n  var themedProps = useStyleConfig('Spinner', {\n    size: size\n  }, emptyObject, emptyObject);\n  var _ref2 = typeof size === 'string' ? themedProps : {\n      width: size,\n      height: size\n    },\n    height = _ref2.height,\n    width = _ref2.width,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  useEffect(function () {\n    var delayTimer = null;\n    if (delay > 0) {\n      delayTimer = setTimeout(function () {\n        setIsVisible(true);\n      }, delay);\n    }\n    return function () {\n      clearTimeout(delayTimer);\n    };\n  }, [delay]);\n  if (!isVisible) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    width: width,\n    height: height,\n    lineHeight: 0\n  }, props, rest, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Box, {\n    is: \"svg\",\n    animation: \"\".concat(loadingKeyframes, \" 2s linear infinite\"),\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 150 150\"\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"circle\"\n  }, innerStyle(themedProps.color), {\n    cx: \"75\",\n    cy: \"75\",\n    r: \"60\"\n  }))));\n}));\nSpinner.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number\n});\nexport default Spinner;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
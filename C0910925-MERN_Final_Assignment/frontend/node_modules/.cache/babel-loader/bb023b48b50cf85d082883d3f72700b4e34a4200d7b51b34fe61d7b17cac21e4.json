{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"activeElevation\", \"background\", \"border\", \"borderBottom\", \"borderLeft\", \"borderRight\", \"borderTop\", \"className\", \"elevation\", \"hoverElevation\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nvar pseudoSelectors = {\n  _hover: '&:hover',\n  _active: '&:active'\n};\nvar internalStyles = {};\nvar _Pane = function _Pane(props, ref) {\n  var activeElevation = props.activeElevation,\n    background = props.background,\n    border = props.border,\n    borderBottom = props.borderBottom,\n    borderLeft = props.borderLeft,\n    borderRight = props.borderRight,\n    borderTop = props.borderTop,\n    className = props.className,\n    elevation = props.elevation,\n    hoverElevation = props.hoverElevation,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var themedProps = useStyleConfig('Pane', {\n    // @ts-expect-error TS(2345): Argument of type '{ elevation: Elevation | undefin... Remove this comment to see the full error message\n    elevation: elevation,\n    hoverElevation: hoverElevation,\n    activeElevation: activeElevation,\n    background: background,\n    border: border,\n    borderTop: borderTop,\n    borderRight: borderRight,\n    borderBottom: borderBottom,\n    borderLeft: borderLeft,\n    className: className\n  }, pseudoSelectors, internalStyles); // @ts-expect-error TS(2322): Type '{ selectors: SelectorMap | undefined; style:... Remove this comment to see the full error message\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref,\n    className: className\n  }, themedProps, restProps));\n};\n_Pane.displayName = \"_Pane\";\nvar Pane = /*#__PURE__*/memo(/*#__PURE__*/forwardRef(_Pane)); // @ts-expect-error TS(2339): Property 'propTypes' does not exist on type '<E ex... Remove this comment to see the full error message\n\nPane.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Background property.\n   * `tint1`, `tint2` etc. from `theme.colors` are available.\n   */\n  background: PropTypes.string,\n  /**\n   * Elevation of the Pane.\n   */\n  elevation: PropTypes.oneOf([0, 1, 2, 3, 4]),\n  /**\n   * Elevation of the Pane on hover. Might get deprecated.\n   */\n  hoverElevation: PropTypes.oneOf([0, 1, 2, 3, 4]),\n  /**\n   * Elevation of the Pane on click. Might get deprecated.\n   */\n  activeElevation: PropTypes.oneOf([0, 1, 2, 3, 4]),\n  /**\n   * Can be an explicit border value or a boolean.\n   */\n  border: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * Can be an explicit border value or a boolean.\n   */\n  borderTop: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * Can be an explicit border value or a boolean.\n   */\n  borderRight: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * Can be an explicit border value or a boolean.\n   */\n  borderBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * Can be an explicit border value or a boolean.\n   */\n  borderLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n});\nexport default Pane;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}